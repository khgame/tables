import{_ as s,c as e,o as a,ae as t}from"./chunks/framework.DfgEVOTW.js";const c=JSON.parse('{"title":"Serializer Registry","description":"","frontmatter":{},"headers":[],"relativePath":"reference/serializer-registry.md","filePath":"reference/serializer-registry.md"}'),r={name:"reference/serializer-registry.md"};function n(l,i,o,d,h,p){return a(),e("div",null,[...i[0]||(i[0]=[t(`<h1 id="serializer-registry" tabindex="-1">Serializer Registry <a class="header-anchor" href="#serializer-registry" aria-label="Permalink to &quot;Serializer Registry&quot;">​</a></h1><p>The serializer layer now exposes a registry mechanism so new exporters can be plugged in without editing the CLI. Each entry defines the output suffix and the <code>Serializer</code> implementation to execute.</p><h2 id="registering-a-format" tabindex="-1">Registering a Format <a class="header-anchor" href="#registering-a-format" aria-label="Permalink to &quot;Registering a Format&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { registerSerializerFormat } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;tables/dist/serializer&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mySerializer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./mySerializer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerSerializerFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-format&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  suffix: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mf&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  serializer: mySerializer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Registered formats appear automatically in the CLI <code>--format</code> option and will be resolved at runtime by <code>serialize(...)</code>.</p><h2 id="overriding-an-existing-format" tabindex="-1">Overriding an Existing Format <a class="header-anchor" href="#overriding-an-existing-format" aria-label="Permalink to &quot;Overriding an Existing Format&quot;">​</a></h2><p>To replace a built-in format supply <code>override: true</code>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerSerializerFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  suffix: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  serializer: patchedJsonSerializer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, { override: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p>Without <code>override</code> the registry rejects conflicting registrations to avoid accidental clobbering.</p><h2 id="removing-a-format" tabindex="-1">Removing a Format <a class="header-anchor" href="#removing-a-format" aria-label="Permalink to &quot;Removing a Format&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { removeSerializerFormat } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;tables/dist/serializer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeSerializerFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-format&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>This is useful in tests when a custom format should not leak into other suites.</p><h2 id="default-formats" tabindex="-1">Default Formats <a class="header-anchor" href="#default-formats" aria-label="Permalink to &quot;Default Formats&quot;">​</a></h2><p>The following formats are registered at startup:</p><table tabindex="0"><thead><tr><th>name</th><th>suffix</th></tr></thead><tbody><tr><td><code>json</code></td><td><code>json</code></td></tr><tr><td><code>js</code></td><td><code>js</code></td></tr><tr><td><code>ts</code></td><td><code>ts</code></td></tr><tr><td><code>ts-interface</code></td><td><code>ts</code></td></tr><tr><td><code>jsonx</code></td><td><code>json</code></td></tr><tr><td><code>go</code></td><td><code>go</code></td></tr><tr><td><code>csharp</code></td><td><code>cs</code></td></tr></tbody></table><p>New emitters should register themselves during their module initialization so they are available to both API and CLI consumers.</p>`,16)])])}const g=s(r,[["render",n]]);export{c as __pageData,g as default};
