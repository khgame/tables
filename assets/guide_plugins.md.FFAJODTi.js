import{_ as i,c as a,o as e,ae as l}from"./chunks/framework.DfgEVOTW.js";const r=JSON.parse('{"title":"插件与扩展点","description":"","frontmatter":{},"headers":[],"relativePath":"guide/plugins.md","filePath":"guide/plugins.md"}'),t={name:"guide/plugins.md"};function n(d,s,p,o,h,c){return e(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="插件与扩展点" tabindex="-1">插件与扩展点 <a class="header-anchor" href="#插件与扩展点" aria-label="Permalink to &quot;插件与扩展点&quot;">​</a></h1><p>流水线插件按顺序执行，输入与输出均为 <code>Table</code>：</p><ul><li><code>tableRows</code>：获取所有出现过数据的行号</li><li><code>tableEnsureRows (erows)</code>：过滤掉“全空行”（保留 0/false 等有效值）</li><li><code>tableColMap</code>：列字母 -&gt; 列索引</li><li><code>tableMark</code>：定位表头起始 <code>@</code></li><li><code>tableDesc</code>：读取标记行与描述行，形成 <code>markCols/markLine/descLine</code></li><li><code>tableSchema</code>：解析 schema（基于 <code>@khgame/schema</code>）</li><li><code>tableConvert</code>：按 schema + 数据行导出 <code>{ tids, result, collisions }</code></li><li><code>tablePlain</code>：将 <code>Cell</code> 简化为原始值，改变 <code>getValue</code></li><li><code>tableExpand</code>：按 <code>cols</code> 将每行扩展为数组形式，改变 <code>getValue</code></li></ul><p>自定义插件：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Table } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@khgame/tables&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... mutate or annotate table</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <code>readAndTranslate(&#39;x.xlsx&#39;, { plugins: [a, b, c] })</code> 中按数组顺序执行。</p>`,6)])])}const g=i(t,[["render",n]]);export{r as __pageData,g as default};
