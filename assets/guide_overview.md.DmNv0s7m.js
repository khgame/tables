import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.DfgEVOTW.js";const c=JSON.parse('{"title":"快速开始","description":"","frontmatter":{},"headers":[],"relativePath":"guide/overview.md","filePath":"guide/overview.md"}'),l={name:"guide/overview.md"};function n(h,s,p,k,d,o){return e(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h1><p><code>tables</code> 提供完整的 Excel → 游戏产物流水线：</p><ol><li>读取并抽象 Excel，为下游插件提供统一的 <code>Table</code> 结构。</li><li>解析标记行，推导 Schema、生成描述信息。</li><li>根据策略转换数据、生成 <code>tid</code> 映射以及冲突报告。</li><li>通过序列化器输出 JSON / JS / TS / TS-Interface 等多种格式。</li></ol><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @khgame/tables</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local-install</span></span></code></pre></div><h2 id="cli-用法" tabindex="-1">CLI 用法 <a class="header-anchor" href="#cli-用法" aria-label="Permalink to &quot;CLI 用法&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Usage:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-i </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">INPUT_DIR]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-o </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">OUTPUT_DIR]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-f </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">FORMAT]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Options:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  --input,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   输入目录（默认为当前目录）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  --output,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  输出目录（默认为当前目录）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  --format,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  输出格式，json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ts-interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jsonx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> go</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> csharp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  --strict</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      启用严格模式（TID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 冲突立即抛错）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  --silent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      静默模式，仅输出错误</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  --verbose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     详细模式，打印插件执行详情</span></span></code></pre></div><p>示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tables</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./example/game_01_minirpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./artifacts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-interface</span></span></code></pre></div><p>更多常用命令：</p><ul><li>批量导出 JSON：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tables</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./example</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./example/out</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> json</span></span></code></pre></div></li><li>导出 TS：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tables</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./example</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./example/out</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts</span></span></code></pre></div></li><li>单文件处理：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tables</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./example/example.xlsx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./example/out</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> js</span></span></code></pre></div></li><li>严格模式（检测 TID 冲突）：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tables</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./example</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./example/out</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --strict</span></span></code></pre></div></li></ul><h2 id="目录建议" tabindex="-1">目录建议 <a class="header-anchor" href="#目录建议" aria-label="Permalink to &quot;目录建议&quot;">​</a></h2><ul><li>Excel 推荐将主数据放在 <code>__data</code> sheet（若需多 sheet，可在 API 中显式指定 <code>sheetName</code>）。</li><li>示例、静态 Demo 统一放在 <code>example/</code>，便于 <code>npm run ex:*</code> 一键体验。</li><li>测试脚本放在 <code>test/</code>，配合 Jest 回归。</li><li>自定义上下文（枚举、常量、策略）集中在 <code>context.*.json</code>，并通过 <code>serializeContext</code> 产出。</li></ul><h2 id="ts-输出结构" tabindex="-1">TS 输出结构 <a class="header-anchor" href="#ts-输出结构" aria-label="Permalink to &quot;TS 输出结构&quot;">​</a></h2><p>使用 <code>-f ts</code> 或 <code>tsSerializer</code> 时，每张表会生成：</p><ul><li><code>&lt;Table&gt;.ts</code>：类型定义、TID helper、<code>\${Table}Protocol</code> 常量以及 <code>\${Table}Repo</code> 仓库，但不含数据。</li><li><code>&lt;Table&gt;Solution.ts</code>：导入上面的类型模块，携带 <code>raw</code> JSON、记录映射以及默认的 <code>\${table}Repo = \${Table}Repo.fromRaw(raw)</code>。</li></ul><p>这样既能按需只引用类型（自行注入数据），也能直接引用 Solution 文件拿到现成的仓库实例。<code>-f ts-interface</code> 则只输出类型文件。</p><h2 id="api-入口" tabindex="-1">API 入口 <a class="header-anchor" href="#api-入口" aria-label="Permalink to &quot;API 入口&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  readAndTranslate,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  serialize,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  serializeContext,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tableConvert,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tableSchema</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@khgame/tables&#39;</span></span></code></pre></div><ul><li><code>readAndTranslate(filepath, { plugins }, context)</code>：单表读取与插件执行。</li><li><code>serialize(excelPath, outputDir, serializerMap, context)</code>：按映射执行多种序列化输出。</li><li><code>serializeContext(rootDir, serializerList, context)</code>：根据上下文批量输出全局定义（如枚举）。</li></ul><p>更多细节请阅读下方章节。</p><h2 id="excel-表头速览" tabindex="-1">Excel 表头速览 <a class="header-anchor" href="#excel-表头速览" aria-label="Permalink to &quot;Excel 表头速览&quot;">​</a></h2><ul><li>第 1 行：类型标记行（含 <code>@</code> 主键片段）。</li><li>第 2 行：字段描述行（字段名 / 注释）。</li><li>第 3 行起：数据行。</li></ul><p>常见语法：</p><table tabindex="0"><thead><tr><th>标记</th><th>说明</th></tr></thead><tbody><tr><td><code>@</code></td><td>拼接 TID 片段</td></tr><tr><td><code>string</code> / <code>int</code> / <code>float</code> / <code>bool</code> / <code>tid</code></td><td>基础类型</td></tr><tr><td><code>Array&lt;T&gt;</code> 或 <code>[...]</code></td><td>动态数组</td></tr><tr><td><code>{ ... }</code></td><td>对象字面量，字段名取自描述行</td></tr><tr><td><code>enum&lt;EnumName&gt;</code></td><td>引用上下文枚举 <code>context.enums.EnumName</code>，可指定 \`enum&lt;EnumName</td></tr><tr><td><code>$ghost { ... }</code></td><td>当字段整体为空时跳过导出，并在类型上附加 \`</td></tr><tr><td><code>$strict [ ... ]</code></td><td>数组长度必须与声明一致</td></tr></tbody></table><p>更多语法与装饰器说明见 <a href="/tables/guide/concepts.html">概念与约定</a> 与 <a href="/tables/guide/best-practices.html">最佳实践</a>。</p>`,26)])])}const F=i(l,[["render",n]]);export{c as __pageData,F as default};
