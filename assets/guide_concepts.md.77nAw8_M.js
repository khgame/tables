import{_ as e,c as t,o,ae as c}from"./chunks/framework.DfgEVOTW.js";const m=JSON.parse('{"title":"概念与约定","description":"","frontmatter":{},"headers":[],"relativePath":"guide/concepts.md","filePath":"guide/concepts.md"}'),a={name:"guide/concepts.md"};function l(r,d,i,h,n,s){return o(),t("div",null,[...d[0]||(d[0]=[c('<h1 id="概念与约定" tabindex="-1">概念与约定 <a class="header-anchor" href="#概念与约定" aria-label="Permalink to &quot;概念与约定&quot;">​</a></h1><h2 id="从-excel-到-table" tabindex="-1">从 Excel 到 Table <a class="header-anchor" href="#从-excel-到-table" aria-label="Permalink to &quot;从 Excel 到 Table&quot;">​</a></h2><ul><li><code>readAndTranslate(path, { plugins }, context)</code> 负责读取工作簿、抽象为 Table，并依次执行插件（如 <code>tableSchema</code>、<code>tableConvert</code>）。</li><li>Table 是 Excel 的最小抽象单元，插件按需为其附加中间产物与最终结果。</li></ul><h2 id="table-内部结构" tabindex="-1">Table 内部结构 <a class="header-anchor" href="#table-内部结构" aria-label="Permalink to &quot;Table 内部结构&quot;">​</a></h2><p>初始 Table 包含：</p><ul><li><code>cols: string[]</code>：列名（A、B、C...）</li><li><code>data: { [row: string]: { [col: string]: Cell } }</code>：行列索引到单元格的映射</li><li><code>getValue(table, row, col)</code>：对 <code>data</code> 的统一读取入口</li></ul><p>插件会在此基础上拓展属性，如 <code>rows/erows/colMap/marks/markCols/markLine/descLine/markList/schema/convert/...</code>。</p><h2 id="标记区域定位" tabindex="-1">标记区域定位 <a class="header-anchor" href="#标记区域定位" aria-label="Permalink to &quot;标记区域定位&quot;">​</a></h2><ul><li>标记行是<strong>真正出现 <code>@</code> 的那一行</strong>，不要求在首行。<code>tableMark</code> 会遍历单元格找到 <code>@</code> 并记录其行列。</li><li>标记行下方一行视为描述行（字段名与注释来源）。</li><li><code>tableDesc</code> 会将标记行的每一列读取为单独的 <strong>语法 token</strong> 并生成 <code>markCols</code>（有效列）与 <code>markLine</code>/<code>descLine</code>。</li><li>Token 被顺序组合成类型表达式，因此 <code>Array</code>、<code>&lt;</code>、<code>&gt;</code>、<code>[</code>、<code>]</code>、<code>{</code>、<code>}</code>、<code>Pair</code> 等符号都要各占一个单元格。</li></ul><p>典型布局（节选）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>等级   数值   ...</span></span>\n<span class="line"><span>@      Array  &lt;  Map  &lt;  number  &gt;  &gt;  string  string  ...</span></span>\n<span class="line"><span>ID     value        ...                    describe ...</span></span></code></pre></div><h2 id="常用类型语法" tabindex="-1">常用类型语法 <a class="header-anchor" href="#常用类型语法" aria-label="Permalink to &quot;常用类型语法&quot;">​</a></h2><table tabindex="0"><thead><tr><th>写法（按列拆分）</th><th>说明</th></tr></thead><tbody><tr><td><code>@</code></td><td>当前列用于拼接 TID（主键）</td></tr><tr><td><code>uint</code> / <code>int</code> / <code>float</code> / <code>string</code> / <code>bool</code> / <code>tid</code></td><td>基础类型，由 <code>@khgame/schema</code> 提供</td></tr><tr><td><code>Array</code> <code>&lt;</code> <code>T</code> <code>&gt;</code> 或直接 <code>Array&lt;T&gt;</code></td><td>动态数组，转换结果为 <code>T[]</code></td></tr><tr><td><code>[</code> <code>T</code> <code>]</code></td><td>与 <code>Array&lt;T&gt;</code> 等价，常用于短写</td></tr><tr><td><code>{</code> <code>...</code> <code>}</code></td><td>对象字面量，字段名来自描述行</td></tr><tr><td><code>Pair</code> <code>&lt;</code> <code>T</code> <code>&gt;</code></td><td>二元组，转换为 <code>{ key: string, val: T }</code>，常用于 <code>key:value</code> 形式数据</td></tr><tr><td><code>Map</code> <code>&lt;</code> <code>T</code> <code>&gt;</code></td><td>逻辑 Map（本质是 <code>Pair&lt;T&gt;[]</code>），序列化时可据上下文转为对象或数组</td></tr><tr><td><code>A</code> `</td><td><code></code>B`</td></tr><tr><td><code>T</code> <code>?</code></td><td>可选类型</td></tr><tr><td><code>$oneof</code> <code>[</code> <code>...</code> <code>]</code></td><td>限制枚举值的联合</td></tr></tbody></table><blockquote><p><strong>Pair / Map</strong>：输入通常写成 <code>key:value</code> 形式字符串。Pair 代表单条键值，Map 则表示键值对数组，可在序列化阶段转换为对象或保持数组结构。</p></blockquote><h2 id="装饰器" tabindex="-1">装饰器 <a class="header-anchor" href="#装饰器" aria-label="Permalink to &quot;装饰器&quot;">​</a></h2><p>装饰器写在结构体符号之前，占用独立单元格：</p><ul><li><code>$strict</code> <code>[</code> ... <code>]</code>：强制数组大小与声明一致</li><li><code>$ghost</code> <code>{ ... }</code>：生成 Schema，但在导出数据时忽略对应字段</li><li><code>$ghost{</code> ... <code>}</code>：常用于为数组元素中的字段提供补充 Schema</li><li>其他装饰器由 <code>@khgame/schema</code> 解析，遵循相同的 token 拆分规则</li></ul><h2 id="描述行与数据行" tabindex="-1">描述行与数据行 <a class="header-anchor" href="#描述行与数据行" aria-label="Permalink to &quot;描述行与数据行&quot;">​</a></h2><ul><li>描述行（标记行下一行）为每列提供字段名和注释。</li><li>数据行从标记行下<strong>两行</strong>开始，<code>tableEnsureRows</code> 会剔除全空行，<code>tableConvert</code> 按 <code>markCols</code> + <code>getValue</code> 还原每行数据。</li><li>字符串列若留空会被归一化为 <code>&#39;&#39;</code>，避免触发 <code>string required</code>；其他类型需显式写成 <code>T?</code> 或置于 <code>$ghost</code> 结构内才能缺省。</li></ul><blockquote><p>Parser 逻辑来自 <code>@khgame/schema</code> 的 <code>SDMConvertor/TemplateConvertor</code>（参见 <code>node_modules/@khgame/schema/lib/convertor/richConvertor.js</code>），每个 Token 必须占据独立单元格。</p></blockquote><h2 id="结构化表头示例" tabindex="-1">结构化表头示例 <a class="header-anchor" href="#结构化表头示例" aria-label="Permalink to &quot;结构化表头示例&quot;">​</a></h2><blockquote><p><code>@khgame/schema</code> 在 <code>SDMConvertor/TemplateConvertor</code>（见 <code>node_modules/@khgame/schema/lib/convertor/richConvertor.js</code>）中按照 Token 顺序构建 AST，因此 Excel 表头必须逐格拆分装饰器、括号与泛型符号。</p></blockquote><p>以下 Markdown 表以“行 \\ 列”形式模拟 Excel。每个示例都包含标记行、字段名行以及至少两行数据，方便直观对照：</p><ul><li><strong>标记行（Mark Row）</strong>：只写类型与装饰器（<code>@</code>、<code>uint</code>、<code>enum&lt;Rarity&gt;</code>、<code>$ghost</code>、<code>{</code>、<code>[</code> ...）。</li><li><strong>字段名行（Desc Row）</strong>：写业务字段名（<code>tid</code>、<code>name</code>、<code>weight</code> 等），上一行的类型会自动套用到对应列。</li><li><strong>数据行</strong>：自标记行下方两行开始，用于填写真实数据；数组/对象结构需逐列完整展开。</li></ul><blockquote><p>注意：<code>weight:uint</code> 之类“字段名:类型” token 不会被解析成类型；冒号会被当成普通字符。字段名仍写在字段名行，类型只写在标记行。</p></blockquote><h3 id="嵌套对象与可选段" tabindex="-1">嵌套对象与可选段 <a class="header-anchor" href="#嵌套对象与可选段" aria-label="Permalink to &quot;嵌套对象与可选段&quot;">​</a></h3><table tabindex="0"><thead><tr><th>行 \\ 列</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>H</th></tr></thead><tbody><tr><td>标记行</td><td><code>@</code></td><td><code>string</code></td><td><code>$ghost {</code></td><td><code>tid</code></td><td><code>[</code></td><td><code>tid</code></td><td><code>]</code></td><td><code>}</code></td></tr><tr><td>描述行</td><td><code>tid</code></td><td><code>name</code></td><td><code>upgrade</code></td><td><code>to</code></td><td><code>dependency</code></td><td><em>(空)</em></td><td><em>(空)</em></td><td><em>(空)</em></td></tr><tr><td>示例 1</td><td><code>2000000</code></td><td><code>Farm Lv.1</code></td><td><code>&#39;&#39;</code></td><td><code>2000001</code></td><td><code>&#39;&#39;</code></td><td><code>&#39;&#39;</code></td><td><code>&#39;&#39;</code></td><td><code>&#39;&#39;</code></td></tr><tr><td>示例 2</td><td><code>2000001</code></td><td><code>Farm Lv.2</code></td><td><code>&#39;&#39;</code></td><td><code>2000002</code></td><td><code>&#39;&#39;</code></td><td>`2000000</td><td>2000002`</td><td><code>&#39;&#39;</code></td></tr></tbody></table><ul><li><code>$ghost { ... }</code> 允许在示例 1 中完全留空而不导出 <code>upgrade</code> 字段。</li><li><code>dependency</code> 列使用独立的 <code>[</code>、<code>tid</code>、<code>]</code> 三列构成数组，数据行按 <code>TemplateConvertor.validate</code> 的规则通过 <code>|</code> 拆分多个值。</li></ul><h3 id="严格掉落数组" tabindex="-1">严格掉落数组 <a class="header-anchor" href="#严格掉落数组" aria-label="Permalink to &quot;严格掉落数组&quot;">​</a></h3><table tabindex="0"><thead><tr><th>行 \\ 列</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>H</th><th>I</th><th>J</th><th>K</th><th>L</th></tr></thead><tbody><tr><td>标记行</td><td><code>@</code></td><td><code>string</code></td><td><code>$strict [</code></td><td><code>{</code></td><td><code>tid</code></td><td><code>uint</code></td><td><code>}</code></td><td><code>{</code></td><td><code>tid</code></td><td><code>uint</code></td><td><code>}</code></td><td><code>]</code></td></tr><tr><td>描述行</td><td><code>tid</code></td><td><code>stageName</code></td><td><code>dropEntries</code></td><td><em>(空)</em></td><td><code>tid</code></td><td><code>weight</code></td><td><em>(空)</em></td><td><em>(空)</em></td><td><code>tid</code></td><td><code>weight</code></td><td><em>(空)</em></td><td><em>(空)</em></td></tr><tr><td>示例 1</td><td><code>3001</code></td><td><code>Stage 1-1</code></td><td><code>&#39;&#39;</code></td><td><code>&#39;&#39;</code></td><td><code>2001</code></td><td><code>50</code></td><td><code>&#39;&#39;</code></td><td><code>&#39;&#39;</code></td><td><code>2002</code></td><td><code>50</code></td><td><code>&#39;&#39;</code></td><td><code>&#39;&#39;</code></td></tr><tr><td>示例 2</td><td><code>3002</code></td><td><code>Stage 1-2</code></td><td><code>&#39;&#39;</code></td><td><code>&#39;&#39;</code></td><td><code>2003</code></td><td><code>70</code></td><td><code>&#39;&#39;</code></td><td><code>&#39;&#39;</code></td><td><code>2004</code></td><td><code>30</code></td><td><code>&#39;&#39;</code></td><td><code>&#39;&#39;</code></td></tr></tbody></table><ul><li><code>$strict [</code> 要求数据行为定长数组；若缺乏任一元素，<code>SchemaConvertor</code> 会在构建时给出 “conversion failed”。</li><li>继续追加第三个掉落条目时，在 <code>L</code> 之后补 <code>{</code>、<code>tid</code>、<code>uint</code>、<code>}</code>，并保持“一列一个 Token”，最后再写 <code>]</code> 收束。</li></ul><h3 id="alias-别名单列" tabindex="-1">alias 别名单列 <a class="header-anchor" href="#alias-别名单列" aria-label="Permalink to &quot;alias 别名单列&quot;">​</a></h3><ul><li>当某列标记为 <code>alias</code> / <code>alias?</code> 时，tables 会为每行生成“别名 -&gt; TID”的唯一映射；空字符串会被忽略，重复别名会在转换阶段直接抛错。</li><li>序列化结果会附带 <code>${tableName}Protocol</code> 常量数组、<code>${tableName}Repo</code> 仓库以及索引映射，便于通过别名或其他键值进行强类型查表。</li><li><code>alias?</code> 与 <code>alias</code> 行为一致，只是提示这列允许空值；实际导出时两者都会跳过空白单元格。</li></ul><h3 id="pair-map-快写" tabindex="-1">Pair / Map 快写 <a class="header-anchor" href="#pair-map-快写" aria-label="Permalink to &quot;Pair / Map 快写&quot;">​</a></h3><table tabindex="0"><thead><tr><th>行 \\ 列</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>标记行</td><td><code>@</code></td><td><code>string</code></td><td><code>Pair&lt;uint&gt;</code></td><td><code>$ghost {</code></td><td><code>Array&lt;Pair&lt;uint&gt;&gt;</code></td><td><code>}</code></td></tr><tr><td>描述行</td><td><code>tid</code></td><td><code>label</code></td><td><code>cost</code></td><td><code>reward</code></td><td><code>rewards</code></td><td><em>(空)</em></td></tr><tr><td>示例 1</td><td><code>5001</code></td><td><code>Daily Reward</code></td><td><code>gold:100</code></td><td><code>&#39;&#39;</code></td><td>`gem:1</td><td>key:2`</td></tr><tr><td>示例 2</td><td><code>5002</code></td><td><code>Weekly Reward</code></td><td><code>gem:5</code></td><td><code>&#39;&#39;</code></td><td><code>&#39;&#39;</code></td><td><code>&#39;&#39;</code></td></tr></tbody></table><ul><li><code>Pair&lt;uint&gt;</code> 使用 <code>key:value</code> 字符串输入，这是 <code>TemplateConvertor</code> 在 <code>richConvertor.js</code> 中的默认解析逻辑。若写入非字符串或缺少冒号，会触发 “pair value must contain &#39;:&#39;”。</li><li><code>Array&lt;Pair&lt;uint&gt;&gt;</code> 允许以 <code>|</code> 分隔多个条目；配合 <code>$ghost { ... }</code> 可以在无奖励时自动省略字段。</li></ul><blockquote><p>更多示例可参考仓库 <code>README.md</code> 的“类型标记速览”章节；所有结构均与上述代码路径保持一致。</p></blockquote><h2 id="schema-与序列化" tabindex="-1">Schema 与序列化 <a class="header-anchor" href="#schema-与序列化" aria-label="Permalink to &quot;Schema 与序列化&quot;">​</a></h2><ul><li><code>tableSchema</code> 调用 <code>@khgame/schema</code> 将 <code>markList</code> 解析为 AST，生成 TS 接口或上下文信息（枚举、联合等）。</li><li><code>tsInterfaceSerializer</code>、<code>tsSerializer</code>、<code>jsonSerializer</code> 等会使用 Schema 和数据生成目标产物；接口名称通过描述行和 <code>makeInterfaceName</code> 计算。</li></ul><h2 id="数据转换与策略" tabindex="-1">数据转换与策略 <a class="header-anchor" href="#数据转换与策略" aria-label="Permalink to &quot;数据转换与策略&quot;">​</a></h2><ul><li><code>tableConvert</code> 会基于 Schema 生成 <code>convert = { tids, result, collisions }</code>： <ul><li><code>tids</code>：按 <code>@</code> 列拼接出的主键</li><li><code>result</code>：<code>tid -&gt; 行数据</code> 映射</li><li><code>collisions</code>：TID 冲突时记录首条和新条数据</li></ul></li><li>冲突策略（<code>context.policy.tidConflict</code>）： <ul><li><code>error</code>（默认）抛错</li><li><code>overwrite</code> 用后者覆盖前者</li><li><code>ignore</code> 丢弃后者</li><li><code>merge</code> 深合并对象</li></ul></li><li>CLI <code>--strict</code> 会强制 <code>error</code> 策略，避免静默覆盖。</li></ul><h2 id="产出稳定性" tabindex="-1">产出稳定性 <a class="header-anchor" href="#产出稳定性" aria-label="Permalink to &quot;产出稳定性&quot;">​</a></h2><ul><li>所有序列化器会在输出前对 <code>result</code> 的键排序，保证重复构建的产物差异最小化。</li></ul><p>更多：见 <a href="/tables/guide/plugins.html">插件与扩展点</a> · <a href="/tables/guide/serializers.html">序列化输出</a>。</p>',44)])])}const b=e(a,[["render",l]]);export{m as __pageData,b as default};
