import React, { useId, useMemo } from 'react';
import type { RawCard } from '../types';
import { CARD_TYPE_PALETTES } from './CardFrame';
// Prefer external game-icons assets when available. Fallback to built-in paths.
import { GAME_ICON_BODIES } from '../assets/game-icons';

type IconKey =
  | 'sandstorm'
  | 'brain-freeze'
  | 'crown'
  | 'magic-broom'
  | 'baseball-bat'
  | 'backward-time'
  | 'distraction'
  | 'return-arrow'
  | 'grab'
  | 'breaking-chain'
  | 'time-trap'
  | 'life-support'
  | 'megaphone'
  | 'prayer'
  | 'magic-portal'
  | 'exit-door';

// Built-in minimal inline icons used as the last-resort fallback
const ICON_PATHS: Record<IconKey, string> = {
  'sandstorm': `<path fill="currentColor" d="M426.8 31.54c-3 2.57-2.1 8.5 2 13.2c4.1 4.72 9.8 6.62 12.8 4.05c2.5-2.14 2.3-6.9-.3-11c-2.6-4.1-7.5-7.3-10.4-6.26zm-58.2 19.32c-3.5-.04-7.2.86-10.5 2.74c-6.4 3.59-11.1 9.98-11.1 15.16c0 5.18 5.3 7.51 11.7 3.92c6.3-3.59 11.1-9.98 11.1-15.16c0-3.95-2.7-5.65-5.2-6.66c1.4-.11 2.7-.16 4-.16zm-90.7 9.83c-.6-.01-1.2.01-1.9.05c-6.2.41-11.4 2.36-13.3 6.25c-4.8 9.68 9.7 16.2 19.1 13.4c9.4-2.89 12.8-11.05 6.7-16.71c-2.6-2.41-6.3-2.87-10.6-2.97zm-189.1 2.76c-7.61-.1-15.52 2.41-18.47 8.07Z"/>`,
  'brain-freeze': `<path fill="currentColor" d="M253.97 17.375c-103.018 0-188.532 105.858-188.532 237.02c0 131.173 85.514 237.031 188.532 237.031c103.017 0 188.562-105.858 188.562-237.031c0-131.162-85.545-237.02-188.562-237.02zm-2.281 64.845c16.823 0 30.5 7.49 30.5 16.719c0 9.229-13.677 16.72-30.5 16.72s-30.5-7.491-30.5-16.72c0-9.228 13.677-16.719 30.5-16.719Zm-67.938 38.781a11 11 0 0 1 10.938 11.062c0 5.869-4.917 10.656-10.938 10.656c-6.021 0-11.031-4.787-11.031-10.656a11 11 0 0 1 11.031-11.062ZM327 133.5c4.967 0 9 4.033 9 9s-4.033 9-9 9-9-4.033-9-9s4.033-9 9-9Zm-87.781 28.75c51.018 0 92.407 52.209 92.407 116.531c0 64.323-41.39 116.563-92.407 116.563c-51.018 0-92.407-52.24-92.407-116.563c0-64.322 41.389-116.53 92.407-116.53Z"/>`,
  'crown': `<path fill="currentColor" d="m408.256 119.46l-37.7 52.165l19.57 44.426l34.8-37.236l31.02 94.927l-72.473 93.505h-229.97l-74.22-93.505l32.128-94.25l31.944 36.56l18.23-43.426l-38.762-52.319L23.57 221.28L23.533 379.12L99.41 477.61h312.47l74.063-96.433l.04-157.37l-77.727-104.35Zm-311.6-66.936c-30.386 0-55.082 24.668-55.082 55.052c0 30.386 24.696 55.082 55.083 55.082c30.386 0 55.082-24.696 55.082-55.082c0-30.384-24.696-55.052-55.082-55.052Zm312.27 0c-30.386 0-55.082 24.668-55.082 55.052c0 30.386 24.696 55.082 55.082 55.082c30.386 0 55.082-24.696 55.082-55.082c0-30.384-24.696-55.052-55.082-55.052Zm-156.7-35.5c-35.95 0-65.085 29.163-65.085 65.085c0 35.922 29.135 65.085 65.085 65.085c35.95 0 65.085-29.163 65.085-65.085c0-35.922-29.135-65.085-65.085-65.085Z"/>`,
  'magic-broom': `<path fill="currentColor" d="M445.1 22.93c-3.8.11-7.9 1.81-11.5 5.98C379.2 107.6 328 152.4 272.9 178c-48 22.1-100.9 28.2-166.764 27.2l-6.531 22.18l61.074 16.98l-6.105 21.97l-61.047-16.97-4.947 16.69l61.047 16.97l-6.105 21.96-61.047-16.97-4.947 16.69l61.047 16.98l-6.105 21.96-61.047-16.97-6.02 20.38c40.23 31 82.966 59.9 123.538 90.15c84.326 62.2 90.366 68.59 105.336-36c16.7-172.5 72.3-227.1 173.5-336.2c6-6.56 8.6-11.9 8.3-16.5c-.4-6.36-5.08-11.28-13.03-11.05Zm-402.377 188.77l-15.95 53.8l107.095 29.84l6.105-21.96l-53.123-14.79l76.723-268.736z"/>`,
  'baseball-bat': `<path fill="currentColor" d="M429.725 54.54c-3.023.094-5.838 1.16-8.16 3.48l-.05.05L207.31 272.267l-20.374 59.09l78.512 78.512l59.09-20.375l214.197-214.203l.048-.054c2.413-2.413 3.477-5.536 3.476-8.828c-.001-5.427-2.935-11.697-7.34-16.102c-7.495-7.495-19.78-8.792-25.142-3.43l-7.955 7.956l-42.012-42.013l7.956-7.955c5.362-5.362 4.065-17.647-3.43-25.142c-4.405-4.405-10.675-7.339-16.102-7.34c-.131 0-.262.002-.392.004zm-249.45 247.78l-24.32 71.631l-82.24 81.293c-13.586 13.586-37.485 14.325-55.95-4.14c-18.456-18.456-17.72-42.364-4.134-55.95l81.294-82.24l71.63-24.32z"/>`,
  'backward-time': `<path fill="currentColor" d="m208.242 24.629l-52.058 95.205l95.207 52.059l17.271-26.707l36.934 33.435l-14.567 31.054l25.425 11.92l19.138-40.855l118.785 107.651l-110.64 121.486l-12.085-22.277l-23.63 12.076l88.697 163.457l23.63-12.075l-36.094-66.488L491.29 303.6l-23.65-61.139l38.344 34.741l15.95-17.461l-154.547-140.19l-11.315-80.575l-79.343-56.554l-16.559 23.227l37.957 27.047l-31.439 36.548l-19.476-17.624l-17.271 26.707l-29.6-16.188l36.019-65.846l-25.793-14.09zm-130.7 14.392c-17.03-.042-34.176 4.935-49.251 15.24c-48.27 33.621-54.33 107.89-13.13 166.62c35.48 50.92 96.46 73.35 141.49 53.39l34.308-15.332l-43.869-22.492l-17.872 7.932c-32.63 14.19-75.113-5.528-102.4-44.355c-31.087-44.606-26.351-99.837 10.605-125.47c24.839-17.32 58.332-12.562 84.458 10.674c21.265 18.9 34.525 46.077 32.337 70.7l-34.349-12.161l-5.742 16.308l59.69 21.135l21.136-59.69l-16.308-5.741l-11.87 33.548c.22-35.802-19.53-72.745-50.965-100.04c-15.662-13.910-34.391-21.355-52.607-21.4z"/>`,
  'distraction': `<path fill="currentColor" d="M114.938 22.844L83.5 93.624l-60.906-44.06l41.062 56.344L15.5 122.5l51.688 6.906L43.5 178.594l41.344-34.844l5.594 39.468l21.312-34.5l90.968 24.094l-53.78 64.53l43.53-38.75l-16.94 59.72l42.094-60.218l32.907 48.156l-8.844-42.437l102.437 71.062l-87.718-78.688l60.906 11.906L182.22 151.22l75.03 3.125l-63.564-16.842l37.814-44.344L186.875 131.5l-1.156-90.188l-16.78 83.97z"/>`,
  'return-arrow': `<path fill="currentColor" d="m19.828 18.256l-.002.015c249.642 36.995 371.904 169.688 420.194 304.302c49.29 138.233 26.504 262.842 3.074 311.362l-38.04-17.97c22.887-48.252 44.915-157.259-2.155-288.81c-45.566-127.722-160.72-253.128-402.085-288.695a24 24 0 0 1 4.014-20.204Z"/>`,
  'grab': `<path fill="currentColor" d="M243.512 23.29c-27.105 18.337-53.533 32.92-82.274 40.25l-15.273 7.14l5.92 18.41l-54.256 29.025l-4.946 22.09l25.74 32.83l-43.786 50.25l7.733 14.688l54.38-14.688l12.324 58.69l17.17-6.375l32.717-43.313l38.89 53.03l15.133-5.188l21.15-60.75l46.536 35.28l12.063-4.063l21.814-66.72l29.75 16.188l11.345-3.813l12.557-68.47l24.03 6.53l12.094-3.813l23.55-88.344c-28.38-6.86-61.27-1.56-92.57 15.906c-22.25 12.29-43.44 29.52-61.16 50.56c-3.78-4.54-7.85-8.9-12.01-13.02c-23.29-22.84-50.38-36.52-70.31-41.59c-6.5-1.64-12.22-2.25-17.09-1.56Zm-.358 35.443c8.829-.001 20.806 4.04 31.15 10.784c9.39 6.254 20.36 16.26 28.59 24.888a200 200 0 0 1 29.09 40.963c4.82 8.809 8.26 16.464 10.47 21.9l8.63 21.57l12.79-42.6L388.7 96.1c.94-17.2 16.83-36.938 33.23-46.81c14.71-8.98 30.25-8.14 35.92 1.907c5.68 10.048-.56 27.798-15.27 36.78c-11.86 7.23-21.65 9.712-29.02 7.497l-18.56 95.932l-51.89-23.39l-21.112 88.577l-56.872-32.636l-28.66 78.25l-57.46-67.63l-44.35 61.79l-12.85-68.35l-63.376 17.114l1.88-7.99l48.658-49.642l-29.576-39.141l61.683-32.973l-3.574-12.145c25.554-8.12 50.513-21.25 77.217-39.15c7.3-4.93 13.38-7.337 17.93-7.338Z"/>`,
  'breaking-chain': `<path fill="currentColor" d="m64.746 18l20.988 21a33 33 0 0 1-15.42 55.27l18.48 18.42l22.22-22.22l14.2 14.21l-22.22 22.22l40.56 40.54L15.037 379.65L18 493.04h346.21l134.23-134.23V18Zm322.228 84.273l45.023 45.022l26.227-26.218l14.21 14.21l-26.228 26.22l44.694 44.712l-14.22 14.232l-44.693-44.701l-26.228 26.22l-14.21-14.22l26.227-26.218l-45.022-45.022Z"/>`,
  'time-trap': `<path fill="currentColor" d="M255.656 22.75c-131.173 0-237.72 33.326-237.72 74.344c0 41.018 106.547 74.343 237.72 74.343c131.173 0 237.719-33.325 237.719-74.344c0-41.018-106.546-74.343-237.72-74.343Zm0 33.312c59.003 0 106.78 13.556 106.78 30.375c0 16.818-47.777 30.374-106.78 30.374c-59.002 0-106.781-13.556-106.781-30.375c0-16.818 47.779-30.374 106.78-30.374Zm0 119.625c-131.173 0-237.72 33.325-237.72 74.343c0 41.018 106.547 74.344 237.72 74.344c131.173 0 237.719-33.326 237.719-74.344c0-41.018-106.546-74.343-237.72-74.343Zm0 33.312c59.003 0 106.78 13.556 106.78 30.375c0 16.818-47.777 30.374-106.78 30.374c-59.002 0-106.781-13.556-106.781-30.375c0-16.818 47.779-30.374 106.78-30.374Zm0 119.626c-131.173 0-237.72 33.325-237.72 74.343c0 41.018 106.547 74.344 237.72 74.344c131.173 0 237.719-33.326 237.719-74.344c0-41.018-106.546-74.343-237.72-74.343Zm0 33.312c59.003 0 106.78 13.556 106.78 30.375c0 16.818-47.777 30.374-106.78 30.374c-59.002 0-106.781-13.556-106.781-30.375c0-16.818 47.779-30.374 106.78-30.374Z"/>`,
  'life-support': `<path fill="currentColor" d="M374.688 33.78c-40.753-.25-82.475 21.226-109.22 71.125c-34.48-6.628-70.004 6.627-87.845 32.983c-23.002 33.459-12.37 79.852 22.037 103.09c.972.747 1.966 1.448 2.977 2.118l-42.622 88.635l-24.035-133.795c-7.66-42.598-47.575-70.976-90.26-63.275c-42.702 7.662-71.04 47.615-63.381 90.21l40.719 226.467c7.66 42.598 47.575 71.039 90.26 63.338c29.044-5.208 51.143-25.057 60.248-50.592l82.943 52.055c35.83 22.497 81.695 16.482 110.191-14.473c23.275-25.17 27.941-61.63 14.48-92.053l79.176-86.51l71.306 41.524l-8.422 14.445c-19.607 33.604-7.865 76.55 25.7 96.279c33.566 19.73 76.382 7.971 96.023-25.634l6.276-10.768c7.66-13.15 8.78-28.11 4.21-41.207l-26.575-190.972c-7.66-42.597-47.575-70.975-90.26-63.275c-35.875 6.436-63.09 34.905-67.467 69.41L364.17 210.34c-35.382-20.21-81.44-12.017-108.965 21.613c-27.664 33.803-25.108 82.869 5.547 113.88l-53.623 72.72l-43.047-27.017l63.54-132.118c5.744 1.38 11.588 2.104 17.448 2.174c1.14.013 2.28.018 3.42-.002c.057 0 .113-.003.17-.004c1.09-.02 2.18-.067 3.27-.123c32.96-1.695 62.76-17.382 82.08-42.987c7.54-10.155 12.99-21.48 16.28-33.47c24.21-6.55 48.95-25.61 64.96-48.905c15.13-21.982 19.17-49.355 9.38-70.93c-8.62-19.083-26.92-29.908-48.137-30.037Z"/>`,
  'megaphone': `<path fill="currentColor" d="m383.46 123.668l-4.66 17.387C430.868 155.005 467 205.416 467 263.385c0 62.508-41.418 115.731-97.835 134.918l4.314 16.828c67.916-22.135 116.87-85.76 116.87-161.746c0-70.892-43.932-131.746-106.888-155.717zM33.5 150l-.5 226.5h.5L87 439V87z"/>`,
  'prayer': `<path fill="currentColor" d="M261.78 18.063c-52.004 0-94.686 45.7-94.686 103.156c0 44.727 26.285 82.753 62.922 96.953l-43.123 103.96l-25.658-74.345l-45.588 1.47l17.8 67.624L66.78 304.22l-45.72 39.845 65.282 90.188L25.813 353.97l-13 55.906c20.59 14.448 41.586 27.274 61.343 40.97c84.326 62.2 90.366 68.59 105.336-36l13.846-142.742l19.69 47.497c-.892 8.438-1.393 17.373-1.393 26.75c0 99.5 61.904 181.49 138.22 181.49c76.316 0 138.218-81.99 138.218-181.49c0-18.952-2.186-37.206-6.156-54.31l33.25 81.844l53.125-1.406l-20-84.72l55.407 71.656l45.72-39.845-65.28-90.19l60.53 81.72l13-55.906c-20.589-14.448-41.585-27.273-61.343-40.97c-84.326-62.2-90.366-68.59-105.336 36l-13.844 142.742l-19.692-47.497c.893-8.438 1.395-17.373 1.395-26.75c0-99.5-61.905-181.49-138.22-181.49c-3.285 0-6.548.14-9.78.41c12.806-20.5 20.538-45.546 20.538-72.44c0-57.457-42.675-103.156-94.68-103.156Zm0 12.04c45.535 0 82.43 41.471 82.43 91.238c0 49.766-36.896 91.207-82.43 91.207c-45.535 0-82.46-41.44-82.46-91.207c0-49.767 36.925-91.238 82.46-91.238Z"/>`,
  'magic-portal': `<path fill="currentColor" d="m88.418 17.17l-66.12 475.242h18.866l66.12-475.242H88.42Zm245.754 0l66.12 475.242h18.866L352.04 17.17h-17.867Zm-194 63.96l-45.12 323.832h21.697l17.17-122.967h146.287l17.17 122.967h21.698L293.94 81.13H140.172Zm30.9 20.809L253.5 308.07h-127.6l32.27-226.131Zm150.4 78.62l-11.996 85.975h51.21l-11.997-85.974h-27.216Zm-242.93.507l-11.997 85.975h51.21l-11.996-85.975h-27.218Z"/>`,
  'exit-door': `<path fill="currentColor" d="M217 28.098v455.804l142-42.597V70.697zm159.938 26.806l-17.127 3.543v343.126l17.127-5.14zm-208.718-.002l-17.126 3.543v357.257l17.126-5.142zm261.097 37.19l-17.125 3.542v294.66l17.125-5.143zM56.697 100.51L36 120.102l88.668 88.718h175.67V165.64H139.135zM103.576 238.82L36 306.396l20.697 19.596l82.386-82.5z"/>`
};

// Try to normalize imported raw SVGs from game-icons so they respect currentColor.
// This replaces hard-coded fills/strokes with currentColor where safe.
const normalizeIconSvg = (svg: string): string => {
  try {
    let s = svg
      // remove XML headers if present
      .replace(/<\?xml[^>]*>/g, '')
      // strip width/height to allow our viewport scaling
      .replace(/\s(width|height)="[^"]*"/g, '')
      // unify fills to currentColor (common cases from game-icons)
      .replace(/fill="#?[0-9a-fA-F]{3,6}"/g, 'fill="currentColor"')
      .replace(/stroke="#?[0-9a-fA-F]{3,6}"/g, 'stroke="currentColor"');
    // Ensure there is no outer <svg> since we will inject paths only. If there is, extract inner.
    const m = s.match(/<svg[^>]*>([\s\S]*?)<\/svg>/i);
    if (m) return m[1];
    return s;
  } catch {
    return svg;
  }
};

const CARD_ICON_MAP: Record<number, IconKey> = {
  1001: 'sandstorm',
  1002: 'brain-freeze',
  1003: 'crown',
  1004: 'magic-broom',
  1005: 'baseball-bat',
  1006: 'backward-time',
  1007: 'distraction',
  1008: 'return-arrow',
  1009: 'grab',
  1010: 'breaking-chain',
  1011: 'time-trap',
  1012: 'life-support',
  1013: 'megaphone',
  1014: 'prayer',
  1015: 'magic-portal',
  1016: 'exit-door'
};

const TYPE_DEFAULT_ICON: Record<string, IconKey> = {
  Attack: 'sandstorm',
  Counter: 'megaphone',
  Support: 'magic-portal'
};

const FALLBACK_ICON: IconKey = 'sandstorm';

const resolveTid = (card: RawCard): number | null => {
  const raw = card._tid ?? card.tid;
  if (raw == null) return null;
  const tid = Number(raw);
  return Number.isFinite(tid) ? tid : null;
};

const buildGradientStops = (palette: (typeof CARD_TYPE_PALETTES)[keyof typeof CARD_TYPE_PALETTES]) => ({
  core: palette.core,
  edge: palette.edge,
  back: palette.back,
  glow: palette.glow
});

export const CardArtwork: React.FC<{ card: RawCard }> = ({ card }) => {
  const palette = CARD_TYPE_PALETTES[card.type] ?? CARD_TYPE_PALETTES.Attack;
  const tid = resolveTid(card);
  const iconKey = useMemo<IconKey>(() => {
    if (tid && CARD_ICON_MAP[tid]) {
      return CARD_ICON_MAP[tid];
    }
    if (TYPE_DEFAULT_ICON[card.type]) {
      return TYPE_DEFAULT_ICON[card.type];
    }
    return FALLBACK_ICON;
  }, [tid, card.type]);

  // Prefer external game-icons assets when present, fallback to inline hard-coded ones.
  const external = GAME_ICON_BODIES[iconKey as keyof typeof GAME_ICON_BODIES];
  const iconBody = external ? normalizeIconSvg(external) : (ICON_PATHS[iconKey] ?? ICON_PATHS[FALLBACK_ICON]);
  const unique = useId().replace(/:/g, '-');
  const bgId = `${unique}-bg`;
  const glowId = `${unique}-glow`;
  const strokeId = `${unique}-stroke`;
  const highlightId = `${unique}-highlight`;
  const { core, edge, back, glow } = buildGradientStops(palette);

  return (
    <svg viewBox="0 0 512 512" className="w-full h-full" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <linearGradient id={bgId} x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" stopColor={edge} />
          <stop offset="55%" stopColor={core} />
          <stop offset="100%" stopColor={back} />
        </linearGradient>
        <radialGradient id={glowId} cx="50%" cy="40%" r="70%">
          <stop offset="5%" stopColor="rgba(255,255,255,0.22)" />
          <stop offset="55%" stopColor={glow} stopOpacity={0.35} />
          <stop offset="100%" stopColor="rgba(8,15,35,0.65)" />
        </radialGradient>
        <linearGradient id={strokeId} x1="0%" y1="0%" x2="0%" y2="100%">
          <stop offset="0%" stopColor="rgba(255,255,255,0.65)" />
          <stop offset="50%" stopColor="rgba(255,255,255,0.25)" />
          <stop offset="100%" stopColor="rgba(255,255,255,0.05)" />
        </linearGradient>
        <linearGradient id={highlightId} x1="0%" y1="0%" x2="0%" y2="100%">
          <stop offset="0%" stopColor="rgba(255,255,255,0.55)" />
          <stop offset="45%" stopColor="rgba(255,255,255,0.12)" />
          <stop offset="100%" stopColor="rgba(255,255,255,0)" />
        </linearGradient>
      </defs>

      <rect width="512" height="512" rx="56" fill={`url(#${bgId})`} />
      <rect x="24" y="24" width="464" height="464" rx="48" fill={`url(#${glowId})`} opacity={0.82} />
      <rect x="24" y="24" width="464" height="464" rx="48" fill={`url(#${highlightId})`} opacity={0.7} />
      <rect x="24" y="24" width="464" height="464" rx="48" fill="none" stroke={`url(#${strokeId})`} strokeWidth="6" />

      <g opacity={0.25} stroke="rgba(255,255,255,0.18)" strokeWidth="10">
        <path d="M40 160C120 120 200 136 280 104C360 72 440 24 472 40" />
        <path d="M40 344C136 296 224 332 320 284C392 248 440 216 472 232" />
      </g>

      <g
        transform="translate(64 64) scale(0.75)"
        style={{ color: 'rgba(255,255,255,0.95)' }}
        dangerouslySetInnerHTML={{ __html: iconBody }}
      />
    </svg>
  );
};
