import{_ as t,c as a,o as i,ae as n}from"./chunks/framework.DfgEVOTW.js";const m=JSON.parse('{"title":"数值标签语义（Hint Metadata）","description":"","frontmatter":{},"headers":[],"relativePath":"guide/hintmeta.md","filePath":"guide/hintmeta.md"}'),o={name:"guide/hintmeta.md"};function d(s,e,c,l,r,h){return i(),a("div",null,[...e[0]||(e[0]=[n(`<h1 id="数值标签语义-hint-metadata" tabindex="-1">数值标签语义（Hint Metadata） <a class="header-anchor" href="#数值标签语义-hint-metadata" aria-label="Permalink to &quot;数值标签语义（Hint Metadata）&quot;">​</a></h1><p>本模块负责将 Excel 类型标签的语义贯穿在整个表格转换流水线中，确保所有依赖原始标签的精细化处理（安全整数校验、大整数精度保留、未来扩展的特殊数值语法等）都可以落到统一的元数据骨干上。</p><h2 id="校验形态对比" tabindex="-1">校验形态对比 <a class="header-anchor" href="#校验形态对比" aria-label="Permalink to &quot;校验形态对比&quot;">​</a></h2><ul><li><strong>启用 HintMeta 之前</strong>：Excel 类型别名在 <code>@khgame/schema</code> 阶段被折叠为主类型，<code>schemaModel</code> 只保留 <code>primitive.name = &#39;number&#39;</code>。<code>normalizePrimitive</code> 仅依赖值本身判断，不知道列的原始标签，因此不会对 <code>int64</code> 做精度兜底，也无法给出“超出安全整数”的明确定位。</li><li><strong>启用 HintMeta 之后</strong>：别名信息沿着 HintMeta 结构传递，校验层读取 <code>strategyHint</code> 并执行对应策略：普通 <code>int</code> 做安全整数检查，<code>int64/uint64</code> 直接字符串化保留精度，出错时带上 <code>sourceAlias</code> 与表格路径，帮助快速定位。</li></ul><h2 id="功能概览" tabindex="-1">功能概览 <a class="header-anchor" href="#功能概览" aria-label="Permalink to &quot;功能概览&quot;">​</a></h2><ul><li><strong>别名解析</strong>：<code>@khgame/schema</code> 先将 <code>int64</code>、<code>uint32</code> 等别名归一为主类型，<code>schemaModel</code> 在此基础上通过 <code>resolveHintMetadata</code> 记录 <code>sourceAlias</code> 与策略。</li><li><strong>HintMeta 结构</strong>：<code>PrimitiveType</code> 现包含 <code>strategyHint</code>、<code>sourceAlias</code>、<code>flavor</code> 等字段，由 <code>src/serializer/hintmeta/hintMetadata.ts</code> 提供的映射函数生成，可扩展到 decimal、timestamp 等语义。</li><li><strong>归一化策略</strong>：<code>normalizePrimitive</code> 读取 <code>hintMeta.strategyHint</code> 采取不同策略： <ul><li><code>&#39;int&#39;</code> 时执行 <code>Number.isSafeInteger</code> 校验，超过范围抛出带行列路径的错误。</li><li><code>&#39;bigint&#39;</code> 时将值序列化为字符串，确保 <code>int64/uint64</code> 等保持精度。</li></ul></li><li><strong>序列化友好</strong>：后续序列化器可以读取 <code>hintMeta.strategyHint</code> 决定输出类型（例如 <code>ts-interface</code> 将 <code>bigint</code> 字段声明为 <code>string</code>）。</li></ul><h2 id="与校验器的关系" tabindex="-1">与校验器的关系 <a class="header-anchor" href="#与校验器的关系" aria-label="Permalink to &quot;与校验器的关系&quot;">​</a></h2><ul><li>HintMeta 负责把 Excel 别名的语义从解析阶段携带到转换阶段，本身不做硬性校验。</li><li>强制约束仍由 <code>src/plugin/convert.ts::normalizePrimitive</code> 执行：它读取 <code>PrimitiveType.hintMeta.strategyHint</code> 决定是否触发安全整数检查或字符串化。</li><li>若某列未生成 HintMeta，<code>normalizePrimitive</code> 会退回到默认行为，因此 HintMeta 的引入是增量增强，对现有表格保持兼容。</li><li>验证接线是否成功的手段：检查 <code>schemaModel</code> 生成的 <code>PrimitiveType</code> 是否含有 <code>hintMeta</code> 字段，可运行 <code>npm run test -- schemaModel</code> 与 <code>npm run test -- convert.hintmeta</code> 观察断言，也可以执行 <code>npm run smoke</code> 验证示例表格的字符串化输出。</li></ul><h2 id="评价指标" tabindex="-1">评价指标 <a class="header-anchor" href="#评价指标" aria-label="Permalink to &quot;评价指标&quot;">​</a></h2><ul><li><strong>语义清晰度</strong>：Alias → Flavor → Strategy 的映射需一目了然，字段命名与注释应能指导后续扩展（decimal/timestamp 等）。</li><li><strong>覆盖完整性</strong>：常用数值别名都应映射到策略，并通过单测/样例覆盖正确行为。</li><li><strong>可扩展性</strong>：新增策略时仅需在 HintMeta 映射与 <code>normalizePrimitive</code> 增补分支，无需修改流水线骨架。</li><li><strong>可观测性</strong>：报错信息包含 <code>sourceAlias</code> 与路径，配合示例表格或 <code>npm run smoke</code> 便于验证 HintMeta 是否生效。</li></ul><h2 id="流程对齐" tabindex="-1">流程对齐 <a class="header-anchor" href="#流程对齐" aria-label="Permalink to &quot;流程对齐&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Excel 类型行 (int64)</span></span>
<span class="line"><span>        │</span></span>
<span class="line"><span>        ▼</span></span>
<span class="line"><span>@khgame/schema AliasTable → 主类型 uint</span></span>
<span class="line"><span>        │</span></span>
<span class="line"><span>        ▼</span></span>
<span class="line"><span>resolveHintMetadata(rawName=&#39;int64&#39;)</span></span>
<span class="line"><span>        │  └─ 返回 { strategyHint: &#39;bigint&#39;, sourceAlias: &#39;int64&#39;, flavor: &#39;uint64&#39; }</span></span>
<span class="line"><span>        ▼</span></span>
<span class="line"><span>PrimitiveType { kind: &#39;primitive&#39;, name: &#39;number&#39;, hintMeta: { strategyHint: &#39;bigint&#39;, ... } }</span></span>
<span class="line"><span>        │</span></span>
<span class="line"><span>        ▼</span></span>
<span class="line"><span>normalizePrimitive → 字符串化输出 / 安全整数校验</span></span></code></pre></div><h2 id="名词解释" tabindex="-1">名词解释 <a class="header-anchor" href="#名词解释" aria-label="Permalink to &quot;名词解释&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Numeric Alias</td><td>Excel 中书写的原始标签，例如 <code>int64</code>、<code>uint16</code>。</td></tr><tr><td>NumericFlavor</td><td>对别名语义的归类，用于决定 hint 策略，如 <code>int64</code> → <code>uint64</code>。</td></tr><tr><td>StrategyHint</td><td>HintMeta 中的策略指示器（strategy indicator），当前支持 <code>int</code>（安全整数校验）与 <code>bigint</code>（字符串化）。</td></tr><tr><td>Metadata Spine</td><td>贯穿 parse → schemaModel → convert 的语义脊柱，保证策略一致。</td></tr></tbody></table><h2 id="项目现状" tabindex="-1">项目现状 <a class="header-anchor" href="#项目现状" aria-label="Permalink to &quot;项目现状&quot;">​</a></h2><ul><li><code>src/serializer/hintmeta/hintMetadata.ts</code> 维护别名 → <code>strategyHint</code>/<code>flavor</code> 映射，对应测试位于 <code>test/unit/hintMetadata.test.ts</code>。</li><li><code>schemaModel.convertTNode</code> 在生成 <code>PrimitiveType</code> 时注入 <code>hintMeta.strategyHint</code> 与 <code>sourceAlias</code>，覆盖见 <code>test/unit/schemaModel.test.ts</code>。</li><li><code>normalizePrimitive</code> 的错误信息会携带 <code>sourceAlias</code> 与数据路径；<code>test/unit/convert.hintmeta.test.ts</code> 验证字符串化与溢出报错逻辑。</li></ul><h2 id="重构计划回顾" tabindex="-1">重构计划回顾 <a class="header-anchor" href="#重构计划回顾" aria-label="Permalink to &quot;重构计划回顾&quot;">​</a></h2><p>实施过程遵循内部的《Hint Metadata Plan》，详见 <code>src/serializer/hintmeta/plan-hintmeta.md</code>。</p>`,18)])])}const u=t(o,[["render",d]]);export{m as __pageData,u as default};
