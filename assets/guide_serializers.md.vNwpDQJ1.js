import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.DfgEVOTW.js";const E=JSON.parse('{"title":"序列化器与上下文","description":"","frontmatter":{},"headers":[],"relativePath":"guide/serializers.md","filePath":"guide/serializers.md"}'),l={name:"guide/serializers.md"};function n(h,s,p,k,r,d){return e(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="序列化器与上下文" tabindex="-1">序列化器与上下文 <a class="header-anchor" href="#序列化器与上下文" aria-label="Permalink to &quot;序列化器与上下文&quot;">​</a></h1><p>内置序列化器：</p><ul><li><code>jsonSerializer</code>：输出 JSON</li><li><code>jsSerializer</code>：输出可 <code>require()</code> 的 JS（<code>module.exports = {...}</code>）</li><li><code>tsSerializer</code>：输出 TS 接口 + 数据常量 + <code>import * as TableContext from &quot;./context&quot;;</code></li><li><code>tsInterfaceSerializer</code>：仅输出 TS 接口</li><li><code>jsonxSerializer</code>（实验性）：在 JSON 外层增加协议头与源信息（详见 <a href="/tables/reference/protocol.html">协议说明</a>）</li></ul><p>排序稳定性：</p><ul><li>所有序列化器都会按 key 对 <code>convert.result</code> 进行排序，保证产出稳定（便于 Git diff）</li></ul><p>上下文（Context）：</p><ul><li>将 <code>example/context.*.json</code> 等聚合为上下文（通过 <code>loadContext(dir)</code>），供序列化器使用</li><li><code>ts*</code> 相关序列化器可通过 <code>serializeContext(dirOut, serializers, context)</code> 生成 <code>context.ts</code>（包含枚举）</li><li>在 <code>context.meta.exports.enum = [&#39;enums&#39;]</code> 中声明要输出的枚举集合名；枚举定义形如：</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;Colors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;Red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;Blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serializeContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./out&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [tsSerializer, tsInterfaceSerializer], ctx)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./example/hero_advance.xlsx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./out&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;HeroAdvance.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: tsSerializer,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;HeroAdvance.interface.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: tsInterfaceSerializer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, ctx)</span></span></code></pre></div><p>协议版 JSON（jsonx）：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">jsonxSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@khgame/tables&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;example/example.xlsx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;example/out&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Example.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: jsonxSerializer })</span></span></code></pre></div>`,12)])])}const c=i(l,[["render",n]]);export{E as __pageData,c as default};
